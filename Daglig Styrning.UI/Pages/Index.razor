@page "/"

@using Business.Classes;
@using Common.Classes;
@using Common.Interfaces;
@using Common.Enum;
@using Microsoft.Extensions.Configuration;
@using UI.Models;

@inject IDayEventService dayEventService;
@inject ActionPlanProcessor APP
@inject IDataAccess _data
@inject IConfiguration _config
@*https://github.com/TheAmazingOnes/HitachiPowerGrids.git*@

@*<button class="btn btn-primary" @onclick="InsertData">Insert</button>*@
@*<button class="btn btn-warning" @onclick="UpdateData">Update</button>
    <button class="btn btn-danger" @onclick="DeleteData">Delete</button>
    @if (pointsOfAction == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var p in pointsOfAction)
        {
            <p>
                @p.Description @p.Accountable @p.Status @p.ActionDate
            </p>
        }
    }*@


<div class="d-flex flex-column justify-content-center align-items-center text-center">
    <div class="display-6 heading-font heading-font mt-5 mb-1">Daglig styrning</div>
    <nav class="d-flex flex-row max-width align-items-center justify-content-center p-1 mx-auto bg-white">
        <img src="images/SQLMO whole.png">
        <div class="d-none d-md-flex">
            @*Adjusts visibility with the size of the screen*@
        </div>
    </nav>
</div>

<div class="d-flex flex-column justify-content-center align-items-center text-center">
    <div class="display-6 heading-font heading-font mt-5 mb-1 thicker">STOP! Take 5</div>
    <div class="display-8 heading-font heading-font mt-5 mb-1 thick">Stanna upp</div>
    <div class="display-8 heading-font heading-font mt-5 mb-1 thick">Tänk efter</div>
    <div class="display-8 heading-font heading-font mt-5 mb-1 thick">Identifiera risker</div>
    <div class="display-8 heading-font heading-font mt-5 mb-1 thick">Planera arbetet</div>
    <div class="display-8 heading-font heading-font mt-5 mb-1 thick">Jobba säkert och med hög kvalitet</div>
    <nav class="d-flex flex-row max-width align-items-center justify-content-center p-1 mx-auto bg-white">
        <img src="images/StopTakeFive.PNG">
        <div class="d-none d-md-flex">
            @*Adjusts visibility with the size of the screen*@
        </div>
    </nav>

    <h1 class="thicker"><u>Dagens Åtgärder:</u></h1>

    <form action="/action_page.php">
        <input type="checkbox" id="Åtgärd1" name="Åtgärd1" value="Åtgärd">
        <label for="vehicle1" class="thick"> Åtgärd 1</label><br>
        <input type="checkbox" id="Åtgärd2" name="Åtgärd2" value="Åtgärd">
        <label for="vehicle2" class="thick"> Åtgärd 2</label><br>
        <input type="text" class="signature" />


        <input type="submit" class="text-success thicker" value="Signera dagen">
        <input type="submit" class="text-info thicker" value="Ny åtgärd">

    </form>

</div>


@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Notering</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Från Datum : </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" @bind-value="@dayEvent.FromDate" style="width:100%;" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Till Datum : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" @bind-value="@dayEvent.ToDate" style="width: 100%;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Säkerhet : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedSafetyOption">
                            @foreach (var type in GetSafetyOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Kvalitet : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedQualityOption">
                            @foreach (var type in GetQualityOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Leverans : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedDeliveryOption">
                            @foreach (var type in GetDeliveryOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Material : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedMaterialOption">
                            @foreach (var type in GetMaterialOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Ordning & reda : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedTidyOption">
                            @foreach (var type in GetTidyOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Stop! Take 5 : </label>
                    </div>
                    <div class="col-md-8">
                        <select style="height:31px;" @bind="@selectedActionOfTheDayOption">
                            @foreach (var type in GetTidyOptions())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Notering : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="text" @bind-value="@dayEvent.Note" placeholder="Type here..." />
                    </div>
                </div>
                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6" style="text-align:right">
                        <button class="btn save-button save-button:hover" @onclick="SaveNote" style="float: left; margin-right: 5px; margin-top: 5px;">Spara</button>
                        <button class="btn close-button close-button:hover" @onclick="CloseModal" style="float: left; margin-top: 5px;">Stäng</button>
                        @if (dayEvent.DayEventId > 0)
                        {
                            <button class="btn delete-button:hover delete-button" @onclick="DeleteDayEvent" style="float: left; margin-right: 150px; margin-top: 5px; ">Ta bort</button>

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<select @onchange="LoadCalendar">
    @foreach (string monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;


                    //Säkerhet
                <td @onclick="@(() => OpenModal(wIndex, dIndex))">
                    @weeks[weekIndex].Dates[dayIndex].DateValue
                    <br /><br />
                    @if (weeks[weekIndex].Dates[dayIndex].Safety.OK == "OK")
                    {
                        //Få in ID
                        <label style="color:black; font-weight: bold">Säkerhet: </label><label style="color:green; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                    }
                    else if (weeks[weekIndex].Dates[dayIndex].Safety.Incident == "Tillbud")
                    {
                        <label style="color:black; font-weight: bold">Säkerhet: </label><label style="color:blue; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                    }
                    else if (weeks[weekIndex].Dates[dayIndex].Safety.Accident == "Olycka")
                    {
                        <label style="color:black; font-weight: bold">Säkerhet: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
                    }

                    //Kvalitet
                    @if (weeks[weekIndex].Dates[dayIndex].Quality.OK == "OK")
                    {
                        //Få in ID
                        <label style="color:black; font-weight: bold">Kvalitet: </label><label style="color:green; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Quality</label>
                    }

                    else if (weeks[weekIndex].Dates[dayIndex].Quality.QualityProblem == "Kvalitetproblem")
                    {
                        <label style="color:black; font-weight: bold">Kvalitet: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Quality</label>
                    }
                    <br /><br />

                    //Leverans
                    @if (weeks[weekIndex].Dates[dayIndex].Delivery.OK == "OK")
                    {
                        //Få in ID
                        <label style="color:black; font-weight: bold">Leverans: </label><label style="color:green; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Delivery</label>
                    }

                    else if (weeks[weekIndex].Dates[dayIndex].Delivery.DeliveryProblem == "Leveransproblem")
                    {
                <label style="color:black; font-weight: bold">Leverans: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Delivery</label>
                    }
                    <br /><br />

                    //Material
                    @if (weeks[weekIndex].Dates[dayIndex].Material.OK == "OK")
                    {
                        //Få in ID
                        <label style="color:black; font-weight: bold">Material: </label><label style="color:green; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Material</label>
                    }

                    else if (weeks[weekIndex].Dates[dayIndex].Material.MaterialProblem == "Materialproblem")
                    {
                        <label style="color:black; font-weight: bold">Material: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Material</label>
                    }
                    <br /><br />

                    //OrdningOchReda
                    @if (weeks[weekIndex].Dates[dayIndex].Tidy.OK == "OK")
                    {
                        //Få in ID
                        <label style="color:black; font-weight: bold">Ordning och Reda: </label><label style="color:green; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Tidy</label>
                    }

                    else if (weeks[weekIndex].Dates[dayIndex].Tidy.ActionRequired == "Åtgärd krävs")
                    {
                        <label style="color:black; font-weight: bold">Ordning och Reda: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Tidy</label>
                    }
                    <br /><br />



                    @*else
        {
            <label style="color:black; font-weight: bold">Säkerhet: </label><label style="color:red; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label>
        }

        <label style="color:#c00; font-weight: bold">@weeks[weekIndex].Dates[dayIndex].Safety</label> *@

                </td>
                }
            </tr>
        }
    </tbody>
</table>


<h4>Handlingsplan</h4>
@*Felmeddelande*@
@if (error != string.Empty)
{
    <div class="row">
        <div class="col-5 alert alert-danger" role="alert">
            <strong>Error</strong> @error
        </div>
    </div>
}

<div class="row">
    <div class="col-10">
        <table class="table table-hover" style="border:1px solid">
            @*Ändra till egen css-fil*@
            <thead class="thead-light">
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Beskrivning</th>
                    <th scope="col">Kategori</th>
                    <th scope="col">Ansvarig</th>
                    <th scope="col">Projekt</th>
                    <th scope="col">Status</th>
                    <th scope="col">Datum</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    @*Ändra till egen css-fil*@
                    <th scope="row"></th>
                    <td><input style="height:31px;" placeholder="Beskrivning" @bind="description" /></td>
                    <td><input style="height:31px;" placeholder="Kategori" @bind="category" /></td>
                    <td><input style="height:31px;" placeholder="Ansvarig" @bind="accountable" /></td>
                    <td><input style="height:31px;" placeholder="Projekt" @bind="project" /></td>
                    <td>
                        <select style="height:31px;" @bind="@selectedStatus">
                            @foreach (var type in GetActionStatuses())
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </td>
                    @*Datepicker?*@
                    <td><input style="height:31px;" placeholder="Datum" @bind="actionDate" /></td>
                    <td><button class="btn btn-success btn-sm" @onclick="SaveAction">Skapa</button></td>
                </tr>
                @*Skriver ut varje handlingspunkt som vi skapat*@
                @foreach (var p in pointsOfAction)
                {
                    <tr>
                        <th scope="row"><input type="checkbox" id="checkBox1" @bind="checkboxStatus[p.PointOfActionId]" @onclick="() => ChangeCheckboxStatus(p.PointOfActionId)" /></th>
                        <th>@p.Description</th>
                        <th>@p.Category</th>
                        <th>@p.Accountable</th>
                        <th>@p.Project</th>
                        <th>
                            @p.Status
                        @*@if (p.Status == "1")
                            {
                                <span href="#" class="badge badge-success">Skapad</span>
                            }
                            else if (p.Status = "2")
                                {
                                    <span href="#" class="badge badge-primary">Behandlas</span>
                                }
                                else
                                {
                                    <span href="#" class="badge badge-warning">Eskalerad</span>
                                }*@
                    </th>
                    <th>@p.ActionDate.ToShortDateString()</th>
                    <th></th>
                </tr>
            }
            </tbody>
            <tr class="thead-light">
                <th scope="col"></th>
                <th scope="col"><button class="btn btn-info btn-sm" @onclick="UpdateActionStatus">Påbörja</button></th>
                <th scope="col"><button class="btn btn-primary btn-sm" @onclick="EscalateAction">Eskalera</button></th>
                <th scope="col"><button class="btn btn-secondary btn-sm" @onclick="FileAction">Arkivera</button></th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col"><button class="btn btn-danger btn-sm" @onclick="DeleteAction">Radera</button></th>
            </tr>
        </table>
    </div>
</div>


<div class="container">
    <form action="/action_page.php">
        <textarea id="subject" name="subject" placeholder="Skriv handlingsplans beskrivningen här..." style="height:200px"></textarea>

        <input type="submit" value="Skapa">
    </form>
</div>



@code{

    //Kalender
    #region Variabler
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<Week> weeks = new List<Week>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;
    string selectedQualityOption = default;
    string selectedDeliveryOption = default;
    string selectedMaterialOption = default;
    string selectedTidyOption = default;
    string selectedSafetyOption = default;

    string selectedActionOfTheDayOption = default;

   
     

    #endregion

    //Handlingsplan
    #region Variabler
    string error = string.Empty;
    string description = string.Empty;
    string accountable = string.Empty;
    string category = default;
    string project = string.Empty;
    string selectedStatus = "Skapad";
    DateTime actionDate = DateTime.Now;
    IEnumerable<IPointOfAction> actionpoints;
    #endregion

    //DataAccess
    #region Variabler
    List<PointsOfActionModel> pointsOfAction;
    #endregion

    //private void InsertData()
    //{
    //    string sql = "insert into pointsOfAction (Description, Category, Accountable, Project, Status) values (@Description, @Category, @Accountable, @Project, @Status)";

    //    _data.SavePointOfAction(sql, new { Description = "Test 123", Category = "S", Accountable = "Lina", Project = "X", Status = "Skapad" }, _config.GetConnectionString("DagligStyrningDB"));

    //    OnInitialized();
    //}


    private void DeleteData()
    {
        string sql = "delete from pointsOfAction where Accountable = @Accountable";

        _data.SavePointOfAction(sql, new { Accountable = "Lina" }, _config.GetConnectionString("DagligStyrningDB"));

        OnInitialized();
    }


    //Körs när sidan laddas
    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();

        GetPointsOfAction();
        InitCheckboxStatus();
    }

    //Kalender
    DayEvent dayEvent = new DayEvent()
    {
        FromDate = DateTime.Now,
        ToDate = DateTime.Now,
        Note = ""
    };

    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalendarBody()
    {
        weeks = new List<Week>();
        var dayEvents = dayEventService.GetEvents(startDate, endDate);

        int flag = 0;
        Week week = new Week();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            @*dates.Add(new DayEvent()
                {
                    DateValue = dt.ToString("dd-MMM-yyyy"),
                    DayName = dt.ToString("dddd")
                });*@

        var currentObject = dayEvents.Find(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

        dates.Add(new DayEvent()
        {
            DayEventId = currentObject == null ? 0 : currentObject.DayEventId,
            DateValue = dt.ToString("dd-MMM-yyyy"),
            DayName = dt.ToString("dddd"),
            Note = currentObject == null ? "" : currentObject.Note,
            SQLMO_Id = currentObject == null ? 0 : currentObject.SQLMO_Id,
            Actions_Id = currentObject == null ? 0 : currentObject.Actions_Id,

            Safety_Id = currentObject == null ? 0 : currentObject.Safety_Id,
            Quality_Id = currentObject == null ? 0 : currentObject.Quality_Id,
            Delivery_Id = currentObject == null ? 0 : currentObject.Delivery_Id,
            Material_Id = currentObject == null ? 0 : currentObject.Material_Id,
            Tidy_Id = currentObject == null ? 0 : currentObject.Tidy_Id


        });

        if (flag == 7)
        {
            week = new Week();
            week.Dates = dates;
            weeks.Add(week);

            dates = new List<DayEvent>();
            flag = 0;
        }

        if (countdays == totalDays)
        {
            week = new Week();
            week.Dates = dates;
            weeks.Add(week);
            break;
        }

        countdays++;
    }
}

private void CloseModal()
{
    ResetModal();
}

private void OpenModal(int wIndex, int dIndex)
{
    selectedWeekIndex = wIndex;
    selectedDayIndex = dIndex;

    var dayEventObj = dayEventService.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
    dayEvent = dayEventObj;

    displayModal = true;
}

private void SaveNote()
{
    dayEvent = dayEventService.SaveOrUpdate(dayEvent);
    if (dayEvent.DayEventId > 0)
    {
        weeks[selectedWeekIndex].Dates[selectedDayIndex].DayEventId = dayEvent.DayEventId;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].Note = dayEvent.Note;

        //Spara SQLMO här?
        weeks[selectedWeekIndex].Dates[selectedDayIndex].SQLMO = dayEvent.SQLMO;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].ActionsOfTheDay = dayEvent.ActionsOfTheDay;

        weeks[selectedWeekIndex].Dates[selectedDayIndex].Safety = dayEvent.Safety;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].Quality = dayEvent.Quality;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].Delivery = dayEvent.Delivery;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].Material = dayEvent.Material;
        weeks[selectedWeekIndex].Dates[selectedDayIndex].Tidy = dayEvent.Tidy;

        ResetModal();
    }
}

private void DeleteDayEvent()
{
    dayEventService.Delete(dayEvent.DayEventId);
    ResetModal();

    GenerateCalendarHead();
    GenerateCalendarBody();
}

private void ResetModal()
{
    displayModal = false;
    selectedDayIndex = -1;
    selectedWeekIndex = -1;
}

//Dropdown för Set Note
public List<string> GetSafetyOptions()
{
    return Enum.GetNames(typeof(SafetyOptions)).ToList();
}

public List<string> GetQualityOptions()
{
    return Enum.GetNames(typeof(QualityOptions)).ToList();
}

public List<string> GetDeliveryOptions()
{
    return Enum.GetNames(typeof(DeliveryOptions)).ToList();
}

public List<string> GetMaterialOptions()
{
    return Enum.GetNames(typeof(MaterialOptions)).ToList();
}

public List<string> GetTidyOptions()
{
    return Enum.GetNames(typeof(TidyOptions)).ToList();
}

public List<string> GetActionOfTheDay()
{
    return Enum.GetNames(typeof(ActionsOfTheDayTypes)).ToList();
}



//Handlingsplan

public List<string> GetActionStatuses()
{
    return Enum.GetNames(typeof(ActionPointStatuses)).ToList();
}

private void GetPointsOfAction()
{
    string sql = "select * from PointsOfAction";

    pointsOfAction = _data.GetPointsOfAction<PointsOfActionModel, dynamic>(sql, new { }, _config.GetConnectionString("DagligStyrningDB"));
}

private void SaveAction()
{
    string sql = "insert into pointsOfAction (Description, Category, Accountable, Project, Status, ActionDate) values (@Description, @Category, @Accountable, @Project, @Status, @ActionDate)";

    _data.SavePointOfAction(sql, new { Description = @description, Category = @category, Accountable = @accountable, Project = @project, Status = @selectedStatus, ActionDate = DateTime.Now }, _config.GetConnectionString("DagligStyrningDB"));

    GetPointsOfAction();
    InitCheckboxStatus();

    description = string.Empty;
    accountable = string.Empty;
    category = default;
    project = string.Empty;
    selectedStatus = default;
    actionDate = DateTime.Now;
}

void UpdateActionStatus()
{
    //if (checkboxStatus = true)
    //{
    try
    {
        //string sql = "update pointsOfAction set Status = @editStatus where PointOfActionId = @actionId";

        //_data.SavePointOfAction(sql, new { PointOfActionID = @actionId }, _config.GetConnectionString("DagligStyrningDB"));


        //GetPointsOfAction();
        //InitCheckboxStatus();


    }
    catch (Exception ex)
    {
        //Tilldelar felmeddelandet
        error = ex.Message;
    }
    //}
}

//Den längst upp
private void UpdateData()
{
    string sql = "update pointsOfAction set Description = @Description where Accountable = @Accountable";

    _data.SavePointOfAction(sql, new { Description = "Hello Hey", Category = "Q", Accountable = "Lina", Project = "X", Status = "Eskalerad" }, _config.GetConnectionString("DagligStyrningDB"));

    OnInitialized();
}




//checkbox
Dictionary<int, bool> checkboxStatus = new Dictionary<int, bool>();

public void InitCheckboxStatus()
{
    foreach (var p in pointsOfAction)
    {
        checkboxStatus.Add(p.PointOfActionId, false);
    }
}

public void ChangeCheckboxStatus(int s)
{
    if (checkboxStatus[s] == false)
    {
        checkboxStatus[s] = true;
    }
    else
    {
        checkboxStatus[s] = false;
    }
}




//void AddAction()
//{
//    try
//    {
//        if (description == string.Empty || accountable == string.Empty || category == string.Empty || project == string.Empty)
//            throw new AggregateException("Kunde inte lägga till handlingspunkt.");

//        else
//        {
//            APP.AddAction(description, accountable, category, project, ActionPointStatuses.Skapad, actionDate);

//            actionpoints = APP.GetActionPoints();

//            description = string.Empty;
//            accountable = string.Empty;
//            category = default;
//            project = string.Empty;
//            selectedStatus = default;
//            actionDate = DateTime.Now;
//        }

//    }
//    catch (Exception ex)
//    {
//            Tilldelar felmeddelandet
//            error = ex.Message;
//        }
//    }

void EscalateAction()
{
    try
    {


    }
    catch (Exception ex)
    {
        //Tilldelar felmeddelandet
        error = ex.Message;
    }
}

void FileAction()
{
    try
    {


    }
    catch (Exception ex)
    {
        //Tilldelar felmeddelandet
        error = ex.Message;
    }
}

void DeleteAction()
{
    try
    {
        //Delete from DB
        //checkboxStatus.Remove(id)
        //GetPointsOfAction();
        //InitCheckboxStatus();

    }
    catch (Exception ex)
    {
        //Tilldelar felmeddelandet
        error = ex.Message;
    }
}


}